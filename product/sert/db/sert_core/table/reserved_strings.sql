--liquibase formatted sql

--changeset mipotter:create_table_sert_core.reserved_strings endDelimiter:; runOnChange:true runAlways:false rollbackEndDelimiter:;
--preconditions onFail:MARK_RAN onError:HALT
--precondition-sql-check expectedResult:0 select count(1) from all_tables  where owner = upper('${sert_core_schema}') and table_name = 'RESERVED_STRINGS';
CREATE TABLE  ${sert_core_schema}.reserved_strings (
    reserved_string_id   NUMBER
        GENERATED BY DEFAULT AS IDENTITY ( START WITH 1 NOCACHE ORDER )
    NOT NULL,
    reserved_string      VARCHAR2(250) NOT NULL,
    reserved_string_key  VARCHAR2(250) NOT NULL,
    reserved_string_type VARCHAR2(250) NOT NULL,
    description          VARCHAR2(4000),
    active_yn            VARCHAR2(1) DEFAULT ON NULL 'Y' NOT NULL,
    created_by           VARCHAR2(250) DEFAULT ON NULL coalesce(sys_context('APEX$SESSION', 'APP_USER'),
                                                      user) NOT NULL,
    created_on           TIMESTAMP WITH LOCAL TIME ZONE DEFAULT ON NULL systimestamp NOT NULL,
    updated_by           VARCHAR2(250) DEFAULT ON NULL coalesce(sys_context('APEX$SESSION', 'APP_USER'),
                                                      user),
    updated_on           TIMESTAMP WITH LOCAL TIME ZONE DEFAULT ON NULL systimestamp
)
LOGGING;

ALTER TABLE  ${sert_core_schema}.reserved_strings
    ADD CONSTRAINT reserved_strings_active_yn CHECK ( active_yn IN ( 'N', 'Y' ) );

ALTER TABLE  ${sert_core_schema}.reserved_strings ADD CONSTRAINT reserved_strings_pk PRIMARY KEY ( reserved_string_id );

ALTER TABLE  ${sert_core_schema}.reserved_strings ADD CONSTRAINT reserved_strings_un UNIQUE ( reserved_string_key,
                                                                         reserved_string_type );
--rollback drop table ${sert_core_schema}.reserved_strings;