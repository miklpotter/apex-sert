--liquibase formatted sql

--changeset mipotter:create_table_sert_core.rule_sets endDelimiter:; runOnChange:true runAlways:false rollbackEndDelimiter:;
--preconditions onFail:MARK_RAN onError:HALT
--precondition-sql-check expectedResult:0 select count(1) from all_tables  where owner = upper('${sert_core_schema}') and table_name = 'RULE_SETS';
CREATE TABLE  ${sert_core_schema}.rule_sets (
    rule_set_id      NUMBER
        GENERATED BY DEFAULT AS IDENTITY ( START WITH 1 NOCACHE ORDER )
    NOT NULL,
    rule_set_type_id NUMBER NOT NULL,
    rule_set_name    VARCHAR2(250) NOT NULL,
    rule_set_key     VARCHAR2(250) NOT NULL,
    apex_version     NUMBER NOT NULL,
    active_yn        VARCHAR2(1) DEFAULT ON NULL 'Y' NOT NULL,
    internal_yn      VARCHAR2(1) DEFAULT ON NULL 'N' NOT NULL,
    description      VARCHAR2(4000),
    created_by       VARCHAR2(250) DEFAULT ON NULL coalesce(sys_context('APEX$SESSION', 'APP_USER'),
                                                      user) NOT NULL,
    created_on       TIMESTAMP WITH LOCAL TIME ZONE DEFAULT ON NULL systimestamp NOT NULL,
    updated_by       VARCHAR2(250) DEFAULT ON NULL coalesce(sys_context('APEX$SESSION', 'APP_USER'),
                                                      user),
    updated_on       TIMESTAMP WITH LOCAL TIME ZONE DEFAULT ON NULL systimestamp
)
LOGGING;

ALTER TABLE  ${sert_core_schema}.rule_sets
    ADD CONSTRAINT rule_sets_active_yn CHECK ( active_yn IN ( 'N', 'Y' ) );

ALTER TABLE  ${sert_core_schema}.rule_sets
    ADD CONSTRAINT rule_sets_internal_yn CHECK ( internal_yn IN ( 'N', 'Y' ) );

ALTER TABLE  ${sert_core_schema}.rule_sets ADD CONSTRAINT rule_sets_pk PRIMARY KEY ( rule_set_id );

ALTER TABLE  ${sert_core_schema}.rule_sets ADD CONSTRAINT rule_sets_un UNIQUE ( rule_set_key );
--rollback drop table ${sert_core_schema}.rule_sets;